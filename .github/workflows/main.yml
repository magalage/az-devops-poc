# This action workflow is based on Azure DevOps Pipeline YAML

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the azure-pipelines branch
on:
  push:
    branches: [ azure-pipelines ]
  pull_request:
    branches: [ azure-pipelines ]

env:
  ProjectsFolder: './Application'
  UnitTestProjects: './Application/aspnet-core-dotnet-core.UnitTests'
  FunctionalTestProjects: './Application/aspnet-core-dotnet-core.FunctionalTests'
  BuildConfiguration: Release
  PublishFolder: './Application/drop'
  FunctionalTestsPublishFolder: './Application/drop/FunctionalTests'
  
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Restore
        run: dotnet restore ${{ env.ProjectsFolder }}
      
      - name: Build
        run: dotnet build ${{ env.ProjectsFolder }} --configuration ${{ env.BuildConfiguration }}
      
      # We need to run only the unit tests here. Provded the unit test folder. It does not take global patterns like in Azure DevOps pipeline
      - name: Test
        run: dotnet test ${{ env.UnitTestProjects }} --configuration ${{ env.BuildConfiguration }}
      
      - name: Publish
        run: dotnet publish ${{ env.ProjectsFolder }} ${{ env.BuildConfiguration }} --configuration ${{ env.BuildConfiguration }} --output ${{ env.PublishFolder }}

      - name: Publish functional tests
        run: dotnet publish ${{ env.UnitTestProjects }}/**/*FunctionalTest*.csproj --configuration ${{ env.BuildConfiguration }} --output ${{ env.FunctionalTestsPublishFolder }}
      
      - name: Copy runsettings file
        run: cp ${{ env.FunctionalTestProjects }}/functionalTests.runsettings ${{ env.FunctionalTestsPublishFolder }}

      - name: Copy ARM templates
        run: cp -r ./ArmTemplates/ ${{ env.PublishFolder }}

      - name: Publish Artifact
        uses: actions/upload-artifact@v2
        with:
          name: az-devops-poc-build-drop
          # upload-artifact@v2 doesn't resolve default working folder setting. Needs to provide path from the repo root
          path: ${{ env.PublishFolder }}
